/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Biblioteca;

import Clases.*;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Alvaro
 */
public class PrestamoPublicaciones extends javax.swing.JFrame {
      public Libros book= null;
      public Libros auxbook;//para prestamo
      public Revistas magazine=null;
      public Revistas auxmagazine;//para prestamo
      public static ArrayList<Revistas>auxRevistas=new ArrayList<Revistas>();
      public static ArrayList<Revistas>revistasPrestamos=new ArrayList<Revistas>();
      public static ArrayList<Libros> auxlibros = new ArrayList<Libros>();
      public static ArrayList<Libros>librosPrestamos=new ArrayList<Libros>();
      public ListIterator li;
      public ListIterator liPrestamo; // hash map
      public Map socios= new HashMap();
      public Map sociosPrestamo= new HashMap();
      public Map sociosPrestamo2=new HashMap();
      public Socio auxSocio=null;
      public Socio auxSocioPrestamo;
      public Iterator it;
      public Iterator itPrestamo; //arraylist
      
     public GregorianCalendar getFechaPrestamo() {
        Date dia = (Date) fechaPrestamo.getValue();
        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(dia);
        return gc;
     }  
     public GregorianCalendar getFechaDevolucion() {
        Date dia = (Date) fechaDevolucion.getValue();
        GregorianCalendar gc = new GregorianCalendar();
        gc.setTime(dia);
        return gc;
    
    } 
     
     public  void guardarDatosSocios(Map sociosPrestamo) {
        try {
            //Si hay datos los guardamos...
            if (!sociosPrestamo.isEmpty() || sociosPrestamo.isEmpty()) {
                /****** Serialización de los objetos ******/
                //Serialización de las personas
                FileOutputStream ostreamPre = new FileOutputStream("Socios-Prestamo.dat");
                ObjectOutputStream oosPre = new ObjectOutputStream(ostreamPre);
                //guardamos el array de personas
                oosPre.writeObject(sociosPrestamo);
                ostreamPre.close();
            } else {
                System.out.println("Advertencia: No hay publicaciones prestadas");
            }

        } catch (IOException ioe) {
            System.out.println("Error de IO: " + ioe.getMessage());
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//fin guardarDatos 
   

     
     public  void cargarDatosPrestamo() {
        try {
            //Lectura de los objetos de tipo persona
            FileInputStream istreamPre = new FileInputStream("Socios-Prestamo.dat");
            ObjectInputStream oisPre = new ObjectInputStream(istreamPre);
            sociosPrestamo = (Map) oisPre.readObject();
            istreamPre.close();
        } catch (IOException ioe) {
            System.out.println("Error de IO: " + ioe.getMessage());
        } catch (ClassNotFoundException cnfe) {
            System.out.println("Error de clase no encontrada: " + cnfe.getMessage());
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//fin cargarDatos 
     
 
    /**
     * Creates new form PrestamoPublicaciones
     */
    public PrestamoPublicaciones() {
        initComponents();
        this.setTitle("Biblioteca de la UAH");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        codigoSocio = new javax.swing.JTextField();
        codigoPublicacion = new javax.swing.JTextField();
        tipoPublicacion = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        codigoSocio2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        codigoPublicacion2 = new javax.swing.JTextField();
        tipoPublicacion2 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        reiniciarPrestamo = new javax.swing.JButton();
        prestar = new javax.swing.JButton();
        reiniciarDevolucion = new javax.swing.JButton();
        Devolver = new javax.swing.JButton();
        listaSocio = new javax.swing.JButton();
        listaRevistas = new javax.swing.JButton();
        listaLibros = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        fechaPrestamo = new javax.swing.JSpinner();
        fechaDevolucion = new javax.swing.JSpinner();
        jMenuBar1 = new javax.swing.JMenuBar();
        opcionAtras = new javax.swing.JMenu();
        IrGestionSocios = new javax.swing.JRadioButtonMenuItem();
        IrMenuPrincipal = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IconoBiblio.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("PRÉSTAMO");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("DEVOLUCIÓN");

        jLabel4.setText("Código del socio");

        jLabel7.setText("Código de la publicación");

        jLabel8.setText("Tipo de publicación");

        codigoPublicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoPublicacionActionPerformed(evt);
            }
        });

        tipoPublicacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Libro", "Revista" }));

        jLabel10.setText("Código del socio");

        jLabel12.setText("Código de la publicación");

        codigoPublicacion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoPublicacion2ActionPerformed(evt);
            }
        });

        tipoPublicacion2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Libro", "Revista" }));

        jLabel13.setText("Tipo de publicación");

        reiniciarPrestamo.setBackground(new java.awt.Color(255, 51, 51));
        reiniciarPrestamo.setText("Reiniciar datos");
        reiniciarPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarPrestamoActionPerformed(evt);
            }
        });

        prestar.setBackground(new java.awt.Color(51, 255, 51));
        prestar.setText("PRESTAR");
        prestar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prestarActionPerformed(evt);
            }
        });

        reiniciarDevolucion.setBackground(new java.awt.Color(255, 51, 51));
        reiniciarDevolucion.setText("Reiniciar datos");
        reiniciarDevolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reiniciarDevolucionActionPerformed(evt);
            }
        });

        Devolver.setBackground(new java.awt.Color(51, 255, 51));
        Devolver.setText("DEVOLVER");
        Devolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DevolverActionPerformed(evt);
            }
        });

        listaSocio.setBackground(new java.awt.Color(51, 204, 255));
        listaSocio.setText("GENERAR LISTA-SOCIO");
        listaSocio.setToolTipText("Genera una lista \"codigo-socio\" en un mensaje");
        listaSocio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaSocioActionPerformed(evt);
            }
        });

        listaRevistas.setBackground(new java.awt.Color(51, 204, 255));
        listaRevistas.setText("GENERAR LISTA-REVISTAS");
        listaRevistas.setToolTipText("Genera una lista \"codigo-ltitulo\" en un mensaje");
        listaRevistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaRevistasActionPerformed(evt);
            }
        });

        listaLibros.setBackground(new java.awt.Color(51, 204, 255));
        listaLibros.setText("GENERAR LISTA-LIBROS");
        listaLibros.setToolTipText("Genera un mensaje \"codigo-titulo\" en un mensaje");
        listaLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaLibrosActionPerformed(evt);
            }
        });

        jLabel14.setText("Fecha de devolución");

        jLabel15.setText("fecha de préstamo");

        fechaPrestamo.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(-3600000L), new java.util.Date(), java.util.Calendar.DAY_OF_MONTH));
        fechaPrestamo.setToolTipText("haz \"doble click\" en el dato de la fecha que quieras cambiar");
        fechaPrestamo.setEditor(new javax.swing.JSpinner.DateEditor(fechaPrestamo, "dd/MM/yyyy"));

        fechaDevolucion.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(1338628740000L), new java.util.Date(4115783820000L), java.util.Calendar.DAY_OF_MONTH));
        fechaDevolucion.setToolTipText("haz \"doble click\" en el dato de la fecha que quieras cambiar");
        fechaDevolucion.setEditor(new javax.swing.JSpinner.DateEditor(fechaDevolucion, "dd/MM/yyyy"));

        opcionAtras.setText("ATRAS");

        IrGestionSocios.setSelected(true);
        IrGestionSocios.setText("Gestion Publicaciones");
        IrGestionSocios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IrGestionSociosActionPerformed(evt);
            }
        });
        opcionAtras.add(IrGestionSocios);

        IrMenuPrincipal.setSelected(true);
        IrMenuPrincipal.setText("Menu Principal");
        IrMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IrMenuPrincipalActionPerformed(evt);
            }
        });
        opcionAtras.add(IrMenuPrincipal);

        jMenuBar1.add(opcionAtras);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(reiniciarPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prestar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tipoPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fechaPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(80, 80, 80)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(listaLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listaRevistas, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listaSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(codigoPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addComponent(codigoSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(320, 320, 320)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(reiniciarDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(86, 86, 86)
                            .addComponent(Devolver, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tipoPublicacion2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codigoPublicacion2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codigoSocio2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(codigoSocio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(codigoPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tipoPublicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(codigoSocio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(codigoPublicacion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(tipoPublicacion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reiniciarPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prestar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fechaDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fechaPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel14)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reiniciarDevolucion, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(Devolver, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(38, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(listaSocio, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(listaRevistas, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(listaLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setLocationRelativeTo(null);
        SerializarRevistas.cargarDatos();
        SerializarLibros.cargarDatos();
         try {
            //Lectura de los objetos de tipo persona
            FileInputStream istreamPer = new FileInputStream("fichasDeSocios.dat");
            ObjectInputStream oisPer = new ObjectInputStream(istreamPer);
            socios = (Map) oisPer.readObject();
            istreamPer.close();
        } catch (IOException ioe) {
            System.out.println("Error de IO: " + ioe.getMessage());
        } catch (ClassNotFoundException cnfe) {
            System.out.println("Error de clase no encontrada: " + cnfe.getMessage());
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
        
         
    }//GEN-LAST:event_formWindowOpened

    private void IrGestionSociosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IrGestionSociosActionPerformed
        // TODO add your handling code here:
        GestionAplicaciones Ges1 = new GestionAplicaciones();
        Ges1.setVisible(true);
        guardarDatosSocios(sociosPrestamo);
        this.dispose();
    }//GEN-LAST:event_IrGestionSociosActionPerformed

    private void IrMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IrMenuPrincipalActionPerformed
        // TODO add your handling code here:
        Biblioteca library = new Biblioteca();
        library.setVisible(true);
        guardarDatosSocios(sociosPrestamo);
        this.dispose();
    }//GEN-LAST:event_IrMenuPrincipalActionPerformed

    private void codigoPublicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoPublicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoPublicacionActionPerformed

    private void codigoPublicacion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoPublicacion2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoPublicacion2ActionPerformed

    private void reiniciarPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarPrestamoActionPerformed
        // Establece en blanco todos los campos para introducir y pone en valor inicial los otros
        codigoSocio.setText("");
        codigoPublicacion.setText("");
        tipoPublicacion.setSelectedIndex(0);
        GregorianCalendar gc = new GregorianCalendar();
        gc=(GregorianCalendar) Calendar.getInstance();
        Date dia = gc.getTime();
        fechaPrestamo.setValue(dia);
        
    }//GEN-LAST:event_reiniciarPrestamoActionPerformed

    private void reiniciarDevolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reiniciarDevolucionActionPerformed
        // Establece en blanco todos los campos para introducir y pone en valor inicial a los otros
        codigoSocio2.setText("");
        codigoPublicacion2.setText("");
        tipoPublicacion.setSelectedIndex(0);
        GregorianCalendar gc = new GregorianCalendar();
        gc=(GregorianCalendar) Calendar.getInstance();
        Date dia = gc.getTime();
        fechaDevolucion.setValue(dia);
        
    }//GEN-LAST:event_reiniciarDevolucionActionPerformed

    private void prestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prestarActionPerformed
        // Se obtienen todos los datos de los diferentes campos, y se contruyen las variables necesarias
        String categoria,codigoS,codigoP;
        categoria=(String) tipoPublicacion.getSelectedItem();
        codigoP=codigoPublicacion.getText();
        codigoS=codigoSocio.getText();
        String auxName,auxCategoria,auxDNI,auxCodigo,titulo;
        GregorianCalendar auxFecha,auxFechaPrestamo;
        
        
        if (!socios.containsKey(codigoS)){ // si el codigo no esta en el MAP de socios, se produce un error
            JOptionPane.showMessageDialog(this,"El codigo: "+codigoS+" no pertenece a ningun socio ",
                    "Mensaje de error",JOptionPane.ERROR_MESSAGE);
        }else {
            if (categoria.equals("Libro")){ //si es un libro, se introduce este codigo
                liPrestamo=auxlibros.listIterator();
                while(liPrestamo.hasNext()){/** se recorre el Array de Libros hasta que 
                 se encuentra el objeto libro con el codigo de la publicacion introducido*/
                    book=(Libros) liPrestamo.next();
                    if (book.getCodigoControl().equals(codigoP)){
                        auxbook=book;
                    }
                }
                if (auxbook==null){/**si el objeto libro esta vacio, significa que no hay ningun codigo de publicacion como el introducido
                    y que el codigo de publicacion esta mal */
                    JOptionPane.showMessageDialog(this,"El codigo: "+codigoP+" no pertenece a ningun libro ",
                    "Mensaje de error",JOptionPane.ERROR_MESSAGE);
                } else {// se obtienen los datos necesarios para la instanciacion de un objeto de clase Socio, pero con un nuevo constructor
                    //(se añaden a los ya conocidos, un elemento de tipo Libro, y una fecha de prestamo)
                    titulo=auxbook.getTitulo();
                    auxSocio=(Socio)socios.get(codigoS);
                    auxName=auxSocio.getNombreSocio();
                    auxCategoria=auxSocio.getCategoria();
                    auxDNI=auxSocio.getDNI();
                    auxCodigo=codigoS;
                    auxFecha=auxSocio.getFechaInscripcion();
                    auxFechaPrestamo=getFechaPrestamo();
                    
                    auxSocioPrestamo= new Socio (auxName,auxDNI,auxCategoria,auxCodigo,auxFecha,auxbook,auxFechaPrestamo);
                    sociosPrestamo.put(codigoS,auxSocioPrestamo);
                    guardarDatosSocios(sociosPrestamo);
                    /** Se crea un nuevo socio, y se mete en un nuevo HASHMAP llamado sociosPrestamo*/
                    JOptionPane.showMessageDialog(this,"El socio: "+auxName+"("+codigoS+")"+"\n"+" ha tomado prestado el libro: "
                         +titulo+"("+codigoP+")"+"\n","Mensaje de Prestamo",JOptionPane.INFORMATION_MESSAGE);
                    JOptionPane.showMessageDialog(this,"Libro prestado, se ha generado el ticket de prestamo",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                    try {
                        generaFichaLibroP(auxSocioPrestamo);
                    } catch (IOException ex) {
                        Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                /**eL CODIGO siguiente es exactamente igual que el anterior, pero cambiando el 
                 objeto libro, por el objeto Revista*/
            } else if (categoria.equals("Revista")){
               liPrestamo=auxRevistas.listIterator();
                while(liPrestamo.hasNext()){
                    magazine=(Revistas) liPrestamo.next();
                    if (magazine.getCodigoControl().equals(codigoP)){
                        auxmagazine=magazine;
                    }
                }
                if (auxmagazine==null){
                    JOptionPane.showMessageDialog(this,"El codigo: "+codigoP+" no pertenece a ningun Revista ",
                    "Mensaje de error",JOptionPane.ERROR_MESSAGE);
                } else {
                    titulo=auxmagazine.getTitulo();
                    auxSocio=(Socio)socios.get(codigoS);
                    auxName=auxSocio.getNombreSocio();
                    auxCategoria=auxSocio.getCategoria();
                    auxDNI=auxSocio.getDNI();
                    auxCodigo=codigoS;
                    auxFecha=auxSocio.getFechaInscripcion();
                    auxFechaPrestamo=getFechaPrestamo();
                    
                    auxSocioPrestamo= new Socio (auxName,auxDNI,auxCategoria,auxCodigo,auxFecha,auxmagazine,auxFechaPrestamo);
                    sociosPrestamo.put(codigoS,auxSocioPrestamo);
                    guardarDatosSocios(sociosPrestamo);
                    JOptionPane.showMessageDialog(this,"El socio: "+auxName+"("+codigoS+")"+"\n"+" ha tomado prestado la revista: "
                         +titulo+"("+codigoP+")"+"\n","Mensaje de Prestamo",JOptionPane.INFORMATION_MESSAGE);
                    JOptionPane.showMessageDialog(this,"Revista prestada, se ha generado el ticket de prestamo",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                
                    try {
                        generaFichaRevista(auxSocioPrestamo);//genera un documento .TXT con la informacion del prestamo
                    } catch (IOException ex) {
                        Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
            }
        }

        
    }//GEN-LAST:event_prestarActionPerformed

    private void listaRevistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaRevistasActionPerformed
        // Se va a generar una lista titulo revista- codigo revista
        auxRevistas=SerializarRevistas.getRevista(); // se consigue un array de tipo revista
        li = auxRevistas.listIterator();// se crea un iterador para recorrerlo
        int lengh =auxRevistas.size();// se consigue el tamaño del array
        String [] lista =new String [lengh];//se crea un array de String de longitud el tamaño del array
        int cont=0;
        if (auxRevistas.size() < 1) { // si el tamaño del array es inferior a 1 significa que no hay revistas
                JOptionPane.showMessageDialog(this, "No hay Revistas.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
        while (li.hasNext()) {
             magazine = (Revistas) li.next();  // se obtiene un elemento del array
             if (magazine != null) {// si este tiene datos se hace el siguiente codigo
                  if (cont<=lengh) {
                      String titul=magazine.getTitulo();// se obtiene el titulo de la revista
                      String cod=magazine.getCodigoControl();// se obtiene el codigo de la revista
                      lista[cont]="Titulo de la Revista: "+titul+" - codigo control del libro: "
                              + " "+cod+"\n";//se introducen los datos en el array de String
                      cont++;
                   
                  } 
            }
        
      }  
        JOptionPane.showMessageDialog(this, lista , "lista titulo-codigo", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_listaRevistasActionPerformed

    private void listaLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaLibrosActionPerformed
        // Se genera una lista titulo libro - codigo del libro
        auxlibros=SerializarLibros.getLibros();// se consigue un Array de tipo Libro con los datos guardados
        li = auxlibros.listIterator();//se crea un iterador para recorrerlo
        int lengh =auxlibros.size();//se consigue la longitud del array de Libros
        String [] lista =new String [lengh];//se crea un arrayde String de longitud el tamaño del array de libros
        int cont=0;
        if (auxlibros.size() < 1) {//si el tamaño es menor que 1, quiere decir que no hay datos, 
                JOptionPane.showMessageDialog(this, "No hay libros.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }
        while (li.hasNext()) {
             book = (Libros) li.next(); //se obtiene un objeto libro del array de Libro 
             if (book != null) {
                  if (cont<=lengh) {
                      String titul=book.getTitulo();//se obtiene el titiulo del libro
                      String cod=book.getCodigoControl();//se obtiene el codigo del libro
                      lista[cont]="Titulo del libro: "+titul+" - codigo control del libro: "
                              + " "+cod+"\n";
                      cont++;
                   // se introducen en el array de String los datos del libro
                  } 
            }
        
      }  
        JOptionPane.showMessageDialog(this, lista , "lista titulo-codigo", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_listaLibrosActionPerformed

    private void listaSocioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaSocioActionPerformed
        // Genera una lista socio=codigo de Socio,
        String auxCoSocio;
        String auxname;
        String auxcod;
        int lengh =socios.size();//se consigue el tamaño del MAP de socios
        String [] lista = new String [lengh];// se crea un array de String de la longitud del Map Socios
        int cont=0;
        it = socios.entrySet().iterator();//se crea un iterator para recorrerlo 
         if (socios.size()>0){
            while(it.hasNext() && cont<=lengh){
            Map.Entry me = (Map.Entry)it.next();
            auxCoSocio=(String) me.getKey();//se consigue la clave del elemento del Map
            auxSocio=(Socio) socios.get(auxCoSocio);//se consigue el objeto Socio asignado a esa clave
            auxname=auxSocio.getNombreSocio();//se consigue el nombre del socio
            auxcod=auxSocio.getCodigo();//se consigue el codigo del socio
            lista[cont]="Nombre del Socio :"+auxname+" - codigo del socio: "
                    + " "+auxcod+"\n";//se introduce en el array este String
            cont++;
            }
     }
        JOptionPane.showMessageDialog(this, lista , "lista nombre-codigo", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_listaSocioActionPerformed

    private void DevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DevolverActionPerformed
        //Codigo para devolver un libro
        Socio auxsocio;
        int dias,mes,anio, diasDevolucion,mesDevolucion,anioDevolucion,contdias,
            diasPrestamo,diasTotalD;
        String categoria=(String) tipoPublicacion2.getSelectedItem();
        cargarDatosPrestamo();// se carga el MAP de sociosPrestamo
        if (!sociosPrestamo.containsKey(codigoSocio2.getText())) {/** Si el codigo no
            pertenece al MAP, entonces este socio no tiene en prestamo ninguna publicacion*/
            JOptionPane.showMessageDialog(this,"El codigo: "+codigoSocio2.getText()+" no pertenece "
                    + "a ningun socio con publicacion en prestamo","Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
           String keysocio=codigoSocio2.getText();
           auxsocio=(Socio) sociosPrestamo.get(keysocio);//se consigue un objeto Socio del MAP, con el codigo de socio introducido
            if (categoria.equals("Libro")) {//si la publicacion es un libro, se ejecutara lo siguiente
                Libros auxlibroD=auxsocio.getTipoLibros(); // se consigue el objeto Libro del objeto Socio obtenido anteriormente
                if (auxlibroD==null) {
                    JOptionPane.showMessageDialog(this,"El codigo de publicacion:"+codigoPublicacion2.getText()
                          + " no pertenece a ningun libro en prestamo","Mensaje de error",JOptionPane.ERROR_MESSAGE);
                } else {
                String auxCodigoP=auxlibroD.getCodigoControl();//se consigue el Codigo del libro
                if (!auxCodigoP.equals(codigoPublicacion2.getText())){// si el codigo no coinciden con los guardados entonces, salta error
                    JOptionPane.showMessageDialog(this,"El codigo: "+codigoPublicacion2.getText()+"no pertenece "
                    + "a ninguna publicación en prestamo asignada a este socio","Mensaje de error",
                    JOptionPane.ERROR_MESSAGE);
                } else { /** Con el siguiente codigo se calcula el numero de dias que ha estado prestado el libro
                 para ello se saca de manera individual mediante llamadas a metodos (mas adelante se ven reflejados)
                 y se consiguen dia, mes y año, despues se pasa todo a dias y se hace la resta,
                 obteniendo el numero de dias totales que ha estado prestado*/
                    String auxCategoria=auxsocio.getCategoria();
                    if (auxCategoria.equals("Alumno")){// para cuando es alumno-libro
                        GregorianCalendar auxfecha=auxsocio.getFechaEntradaPubli();
                        Date auxd=auxfecha.getTime();
                        dias=obtenerDia(auxd);
                        mes=obtenerMes(auxd)*30;
                        anio=obtenerAnio(auxd)*365;
                        diasPrestamo=dias+mes+anio;
                        
                        GregorianCalendar auxFechaDevolucion=getFechaDevolucion();
                        Date auxd2=auxFechaDevolucion.getTime();
                        diasDevolucion=obtenerDia(auxd2);
                        mesDevolucion=obtenerMes(auxd2)*30;
                        anioDevolucion=obtenerAnio(auxd2)*365;
                        diasTotalD=diasDevolucion+mesDevolucion+anioDevolucion;
                        
                        contdias=diasTotalD-diasPrestamo;
                        if (contdias<=6) {// si los dias que ha estado prestado no superan los 6, se ha devuelto bien
                            JOptionPane.showMessageDialog(this,"El libro ha sido devuelto "
                                + "correctamente","Mensaje de Informacion"
                                ,JOptionPane.INFORMATION_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Libro devuelto, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                             try {
                                generaFichaLibroD(auxsocio);//se genera un ticket de devolucion
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());//se borra el socio del HASHMAP
                        }else{ //devoulcion con mas dias
                            int auxdias=contdias-6;
                            String contadorDias=Integer.toString(auxdias);
                            JOptionPane.showMessageDialog(this,"Libro entregado fuera de plazo!"+"\n"
                               + "El libro ha sido entregado con :"+contadorDias+ " dias de retraso","Mensaje de Advertencia"
                                ,JOptionPane.WARNING_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Libro devuelto, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaLibroD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }   
                    
                    } else{ /** Este codigo es el mismo que para cuando el socio es alumno,
                     pero para el profesor, solo se diferencian en el numero de dias que el libro
                     esta prestado*/
                         GregorianCalendar auxfecha=auxsocio.getFechaEntradaPubli();
                        Date auxd=auxfecha.getTime();
                        dias=obtenerDia(auxd);
                        mes=obtenerMes(auxd)*30;
                        anio=obtenerAnio(auxd)*365;
                        diasPrestamo=dias+mes+anio;
                        
                        GregorianCalendar auxFechaDevolucion=getFechaDevolucion();
                        Date auxd2=auxFechaDevolucion.getTime();
                        diasDevolucion=obtenerDia(auxd2);
                        mesDevolucion=obtenerMes(auxd2)*30;
                        anioDevolucion=obtenerAnio(auxd2)*365;
                        diasTotalD=diasDevolucion+mesDevolucion+anioDevolucion;
                        
                        contdias=diasTotalD-diasPrestamo;
                        if (contdias<=10) {
                            JOptionPane.showMessageDialog(this,"El libro ha sido devuelto "
                                + "correctamente","Mensaje de Informacion"
                                ,JOptionPane.INFORMATION_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Libro devuelto, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaLibroD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }else{//devolucion con mas dias
                            int auxdias=contdias-10;
                            String contadorDias=Integer.toString(auxdias);
                            JOptionPane.showMessageDialog(this,"Libro entregado fuera de plazo!"+"\n"
                               + "El libro ha sido entregado con :"+contadorDias+ " dias de dias de retraso","Mensaje de Advertencia"
                                ,JOptionPane.WARNING_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Libro devuelto, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaLibroD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }
                        
                     }
                }
             }
            /**Ahora viene el codigo para cuando la publicacion es una revista,
             que es exactamente igual, que en los libros, pero cambia que objeto con el que se sacan
             los datos de la publicacion, que es un objeto Revista
             Tambien cambian los dias que puede estar prestada*/
            
            } else if(categoria.equals("Revista")){ //para casos de revista
                Revistas auxRevistasD=auxsocio.getTipoRevistas();
                if (auxRevistasD==null) {
                    JOptionPane.showMessageDialog(this,"El codigo de publicacion:"+codigoPublicacion2.getText()
                          + " no pertenece a ninguna revista en prestamo","Mensaje de error",JOptionPane.ERROR_MESSAGE);
                } else { 
                    String auxCodigoP=auxRevistasD.getCodigoControl();
                    if (!auxCodigoP.equals(codigoPublicacion2.getText())){
                         JOptionPane.showMessageDialog(this,"El codigo: "+codigoPublicacion2.getText()+"no pertenece "
                        + "a ninguna publicación en prestamo asignada a este socio","Mensaje de error",
                        JOptionPane.ERROR_MESSAGE);
                    } else { //codigo publicacion
                        String auxCategoria=auxsocio.getCategoria();
                        if (auxCategoria.equals("Alumno")){// para cuando el socio es un alumno
                             GregorianCalendar auxfecha=auxsocio.getFechaEntradaPubli();
                             Date auxd=auxfecha.getTime();
                             dias=obtenerDia(auxd);
                             mes=obtenerMes(auxd)*30;
                             anio=obtenerAnio(auxd)*365;
                             diasPrestamo=dias+mes+anio;
                        
                             GregorianCalendar auxFechaDevolucion=getFechaDevolucion();
                             Date auxd2=auxFechaDevolucion.getTime();
                             diasDevolucion=obtenerDia(auxd2);
                             mesDevolucion=obtenerMes(auxd2)*30;
                             anioDevolucion=obtenerAnio(auxd2)*365;
                             diasTotalD=diasDevolucion+mesDevolucion+anioDevolucion;
                        
                             contdias=diasTotalD-diasPrestamo;
                             if (contdias<=3) {
                                JOptionPane.showMessageDialog(this,"Revista ha sido devuelta correctamente,","Mensaje de Informacion"
                                ,JOptionPane.INFORMATION_MESSAGE);
                                 JOptionPane.showMessageDialog(this,"Revista devuelta, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaRevistaD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                            }else{ //devoulcion con mas dias
                                int auxdias=contdias-3;
                                String contadorDias=Integer.toString(auxdias);
                                JOptionPane.showMessageDialog(this,"Revista entregada fuera de plazo!"+"\n"
                               + "La Revista ha sida entregado con :"+contadorDias+ " dias de retraso","Mensaje de Advertencia"
                                ,JOptionPane.WARNING_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Revista devuelta, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaRevistaD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }   
                    
                     } else{ //para cuando el socio es un profesor.
                        GregorianCalendar auxfecha=auxsocio.getFechaEntradaPubli();
                        Date auxd=auxfecha.getTime();
                        dias=obtenerDia(auxd);
                        mes=obtenerMes(auxd)*30;
                        anio=obtenerAnio(auxd)*365;
                        diasPrestamo=dias+mes+anio;
                        
                        GregorianCalendar auxFechaDevolucion=getFechaDevolucion();
                        Date auxd2=auxFechaDevolucion.getTime();
                        diasDevolucion=obtenerDia(auxd2);
                        mesDevolucion=obtenerMes(auxd2)*30;
                        anioDevolucion=obtenerAnio(auxd2)*365;
                        diasTotalD=diasDevolucion+mesDevolucion+anioDevolucion;
                        
                        contdias=diasTotalD-diasPrestamo;
                        if (contdias<=6) {
                            JOptionPane.showMessageDialog(this,"La revista ha sido devuelta "
                                + "correctamente","Mensaje de Informacion"
                                ,JOptionPane.INFORMATION_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Revista devuelta, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaRevistaD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }else{//devolucion con mas dias
                            int auxdias=contdias-6;
                            String contadorDias=Integer.toString(auxdias);
                            JOptionPane.showMessageDialog(this,"Revista entregada fuera de plazo!"+"\n"
                               + "El libro ha sido entregado con :"+contadorDias+ " dias de retraso","Mensaje de Advertencia"
                                ,JOptionPane.WARNING_MESSAGE);
                            JOptionPane.showMessageDialog(this,"Revista devuelta, se ha generado el ticket de devolucion",
                                    "Mensaje de Impresion",JOptionPane.INFORMATION_MESSAGE);
                            try {
                                generaFichaRevistaD(auxsocio);
                            } catch (IOException ex) {
                                Logger.getLogger(PrestamoPublicaciones.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            sociosPrestamo.remove(codigoSocio2.getText());
                        }
                        
                     }
                }
            }
                
                
                
            } 
        }
        guardarDatosSocios(sociosPrestamo);
        
    }//GEN-LAST:event_DevolverActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        guardarDatosSocios(sociosPrestamo); //se guardan el MAP de sociosPrestamo
       
    }//GEN-LAST:event_formWindowClosing
 /** A continuacion vienen los metodos para generar los tickets en un .txt de Prestamo y Devolucion.
  Para ello se usa la clase PrintWriter y BufferedWriter junto con FileWriter para guardar y escribir en
  el txt todo lo que se ponga en el objeto PrintWriter que hagamos*/
    
    public  void generaFichaLibroP (Socio socioPrestamo) throws IOException {
        String codigo=codigoSocio.getText();
        Libros libroAuxiliar=socioPrestamo.getTipoLibros();
        Date d = socioPrestamo.getFechaEntradaPubli().getTime();
        String fn = DateFormat.getDateInstance(DateFormat.SHORT).format(d);
        PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter(codigo+"_"+socioPrestamo.getNombreSocio()+"_"+libroAuxiliar.
                getTitulo()+"-Prestamo.txt")));
        

        salida.println("-------------------------------- Ficha Persona --------------------------------");
        salida.println("\n");
        salida.println("DNI: " + socioPrestamo.getDNI());
        salida.println("\n");
        salida.println("Nombre: " + socioPrestamo.getNombreSocio());
        salida.println("\n");
        salida.println("codigo de Socio: " + socioPrestamo.getCodigo());
        salida.println("\n");
        salida.println("Categoria: " + socioPrestamo.getCategoria());
        salida.println("\n");
        salida.println("Fecha de Prestamo: " + fn);
        
        salida.println("\n");
       
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
       
        salida.println("\n");
        salida.println("-------------------------------- Ficha Libro --------------------------------");
        salida.println("\n");
        salida.println("Titulo: " + libroAuxiliar.getTitulo());
        salida.println("\n");
        salida.println("Codigo de Control: " + libroAuxiliar.getCodigoControl());
        salida.println("\n");
        salida.println("ISBN: " + libroAuxiliar.getISBN());
        salida.println("\n");
        salida.println("Autores: " + libroAuxiliar.getAutores());
        salida.println("\n");
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
        
        salida.close();
    }
 public  void generaFichaLibroD  (Socio socioPrestamo) throws IOException {
        String codigo=codigoSocio2.getText();
        Libros libroAuxiliar=socioPrestamo.getTipoLibros();
        Date d = socioPrestamo.getFechaEntradaPubli().getTime();
        String fn = DateFormat.getDateInstance(DateFormat.SHORT).format(d);
        Date d2=getFechaDevolucion().getTime();
        String fd=DateFormat.getDateInstance(DateFormat.SHORT).format(d2);
        PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter(codigo+"_"+socioPrestamo.getNombreSocio()+
                "_"+libroAuxiliar.getTitulo()+"-Devolucion.txt")));
        

        salida.println("-------------------------------- Ficha Persona --------------------------------");
        salida.println("\n");
        salida.println("DNI: " + socioPrestamo.getDNI());
        salida.println("\n");
        salida.println("Nombre: " + socioPrestamo.getNombreSocio());
        salida.println("\n");
        salida.println("codigo de Socio: " + socioPrestamo.getCodigo());
        salida.println("\n");
        salida.println("Categoria: " + socioPrestamo.getCategoria());
        salida.println("\n");
        salida.println("Fecha de Prestamo: " + fn);
        salida.println("\n");
        salida.println("Fecha de Devolucion:"+fd); 
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
       
        salida.println("\n");
        salida.println("-------------------------------- Ficha Libro --------------------------------");
        salida.println("\n");
        salida.println("Titulo: " + libroAuxiliar.getTitulo());
        salida.println("\n");
        salida.println("Codigo de Control: " + libroAuxiliar.getCodigoControl());
        salida.println("\n");
        salida.println("ISBN: " + libroAuxiliar.getISBN());
        salida.println("\n");
        salida.println("Autores: " + libroAuxiliar.getAutores());
        salida.println("\n");
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
        
        salida.close();
    }
 
 
 public  void generaFichaRevista (Socio socioPrestamo) throws IOException {
        String codigo=codigoSocio2.getText();
        Revistas RevistasAuxiliar=socioPrestamo.getTipoRevistas();
        Date d = socioPrestamo.getFechaEntradaPubli().getTime();
        String fn = DateFormat.getDateInstance(DateFormat.SHORT).format(d);
        
        PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter(codigo +"_"+socioPrestamo.getNombreSocio()+
                "_"+RevistasAuxiliar.getTitulo()+"-Prestamo.txt")));
        

        salida.println("-------------------------------- Ficha Persona --------------------------------");
        salida.println("\n");
        salida.println("DNI: " + socioPrestamo.getDNI());
        salida.println("\n");
        salida.println("Nombre: " + socioPrestamo.getNombreSocio());
        salida.println("\n");
        salida.println("codigo de Socio: " + socioPrestamo.getCodigo());
        salida.println("\n");
        salida.println("Categoria: " + socioPrestamo.getCategoria());
        salida.println("\n");
        salida.println("Fecha de de Prestamo: " + fn);
        salida.println("\n");
        
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
       
        salida.println("\n");
        salida.println("-------------------------------- Ficha Revista --------------------------------");
        salida.println("\n");
        salida.println("Titulo: " + RevistasAuxiliar.getTitulo());
        salida.println("\n");
        salida.println("Codigo de Control: " + RevistasAuxiliar.getCodigoControl());
        salida.println("\n");
        salida.println("ISBN: " + RevistasAuxiliar.getISBN());
        salida.println("\n");
        salida.println("Autores: " + RevistasAuxiliar.getAutores());
        salida.println("\n");
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
        
        salida.close();
    }
 public  void generaFichaRevistaD (Socio socioPrestamo) throws IOException {
        String codigo=codigoSocio.getText();
        Revistas RevistasAuxiliar=socioPrestamo.getTipoRevistas();
        Date d = socioPrestamo.getFechaEntradaPubli().getTime();
        String fn = DateFormat.getDateInstance(DateFormat.SHORT).format(d);
        Date d2=getFechaDevolucion().getTime();
        String fd=DateFormat.getDateInstance(DateFormat.SHORT).format(d2);
        PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter(codigo +"_"+socioPrestamo.getNombreSocio()+
                "_"+RevistasAuxiliar.getTitulo()+"-Devolucion.txt")));
        

        salida.println("-------------------------------- Ficha Persona --------------------------------");
        salida.println("\n");
        salida.println("DNI: " + socioPrestamo.getDNI());
        salida.println("\n");
        salida.println("Nombre: " + socioPrestamo.getNombreSocio());
        salida.println("\n");
        salida.println("codigo de Socio: " + socioPrestamo.getCodigo());
        salida.println("\n");
        salida.println("Categoria: " + socioPrestamo.getCategoria());
        salida.println("\n");
        salida.println("Fecha de de Prestamo: " + fn);
        salida.println("\n");
        salida.println("\n");
        salida.println("Fecha de Devolucion:"+fd);
       
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
       
        salida.println("\n");
        salida.println("-------------------------------- Ficha Revista --------------------------------");
        salida.println("\n");
        salida.println("Titulo: " + RevistasAuxiliar.getTitulo());
        salida.println("\n");
        salida.println("Codigo de Control: " + RevistasAuxiliar.getCodigoControl());
        salida.println("\n");
        salida.println("ISBN: " + RevistasAuxiliar.getISBN());
        salida.println("\n");
        salida.println("Autores: " + RevistasAuxiliar.getAutores());
        salida.println("\n");
        
        salida.println("\n");
        salida.println("-------------------------------------------------------------------------------");
        
        salida.close();
    }
 
 /** Con estos metodos se obtienen el dia, el mes y el año de una fecha, de un dato
  de tipo Date, que pasemos como argumentos a cada metodo, los utilizamos para obtener los dias
  que ha estado prestado una publicación*/
  public int obtenerDia(Date date){

    if (null == date){
        return 0;

    }
    else{
        String  formato="dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(date));
    }

}
  public int obtenerAnio(Date date){

    if (null == date){
        return 0;
    }
    else{
        String formato="yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(date));

    }

}

  public int obtenerMes(Date date){

    if (null == date){
        return 0;
    }
    else{
        String formato="MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(date));

    }

}
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrestamoPublicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrestamoPublicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrestamoPublicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrestamoPublicaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PrestamoPublicaciones().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Devolver;
    private javax.swing.JRadioButtonMenuItem IrGestionSocios;
    private javax.swing.JRadioButtonMenuItem IrMenuPrincipal;
    private javax.swing.JTextField codigoPublicacion;
    private javax.swing.JTextField codigoPublicacion2;
    private javax.swing.JTextField codigoSocio;
    private javax.swing.JTextField codigoSocio2;
    private javax.swing.JSpinner fechaDevolucion;
    private javax.swing.JSpinner fechaPrestamo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton listaLibros;
    private javax.swing.JButton listaRevistas;
    private javax.swing.JButton listaSocio;
    private javax.swing.JMenu opcionAtras;
    private javax.swing.JButton prestar;
    private javax.swing.JButton reiniciarDevolucion;
    private javax.swing.JButton reiniciarPrestamo;
    private javax.swing.JComboBox tipoPublicacion;
    private javax.swing.JComboBox tipoPublicacion2;
    // End of variables declaration//GEN-END:variables
}
